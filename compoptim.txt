model:

max = 4*x1+6*x2+7*x3+8*x4;

[rawmat] 2*x1+3*x2+4*x3+7*x4 <= 4600;
[labor] 3*x1+4*x2+5*x3+6*x4 <= 5000;
[demand] x1+x2+x3+x4 = 950;
[demandP4] x4 >= 400;

END

######################################################

model:

max = 150*x1+200*x2-10*x3;

[land] x1+x2 <= 45;
[labor] 6*x1+10*x2-x3 <= 0;
[budget] x3 <= 350;
[wheatDemand] 5*x1 <= 140;
[cornDwemand] 4*x2 <= 120;

end

######################################################
model:

max = 300*x1+400*x2-50*x3;

[steel] 2*x1+3*x2 <= 260;
[demandCar] x1 >= 88;
[demandTruck] x2 >= 26;
[M1] 0.8*x1+x2 -x3<= 0;
[M1allowed] x3 <= 98;
[M2] 0.6*x1+0.7*x2 <= 73;

@gin(x1);
@gin(x2);


END

######################################################

MODEL:
 sets:
  PLANT /P1 .. P3/: cpc; !capacity;
  TOWN /T1 .. T4/: dem; !demand;

  ROUTE (PLANT, TOWN): cost, x;
 endsets


!Objective fn;
[totalcost] min = @sum(route: cost*x);

!Capacity constraints;
@for(PLANT (i):
[capacity] @sum(town (j): x(i,j)) <= cpc(i)
);

!Demand constraints;
@for(TOWN (j):
[demand] @sum(plant (i): x(i,j)) >= dem(j)
);


!input;
 data:
 cpc = 	35 50 40;
 dem = 	45 20 30 30;
 cost = 	8 6 10 9 
		9 12 13 7 
		14 9 16 5;
enddata

END

######################################################

MODEL:
 sets:
  PLANT : cpc; !capacity;
  TOWN : dem; !demand;

  ROUTE (PLANT, TOWN): cost, x;
 endsets


!Objective fn;
[totalcost] min = @sum(route: cost*x);

!Capacity constraints;
@for(PLANT (i):
[capacity] @sum(town (j): x(i,j)) <= cpc(i)
);

!Demand constraints;
@for(TOWN (j):
[demand] @sum(plant (i): x(i,j)) >= dem(j)
);


!input;
 data:
 cpc, dem, cost, plant, town = 
	@OLE('transport.xlsx', 'cpc', 'dem', 'cost', 'plants', 'towns');


!output;
@OLE('transport.xlsx', 'solution') = x;

enddata

END


######################################################


MODEL:
 sets:
  PLANT : cpc; !capacity;
  TOWN : dem; !demand;

  ROUTE (PLANT, TOWN): prof, x;
 endsets


!Objective fn;
[totalcost] max = @sum(route: prof*x);

!Capacity constraints;
@for(PLANT (i):
[capacity] @sum(town (j): x(i,j)) <= cpc(i)
);

!Demand constraints;
@for(TOWN (j):
[demand] @sum(plant (i): x(i,j)) <= dem(j)
);


!input;
 data:
 cpc, dem, prof, plant, town = 
	@OLE('transport.xlsx', 'cpc', 'dem', 'prof', 'plants', 'towns');


!output;
@OLE('transport.xlsx', 'solution') = x;

enddata

END

#####################################################################
import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()

#variables:
model.x1 = pyo.Var(bounds=(0,np.inf))
model.x2 = pyo.Var(bounds=(0,np.inf))
model.x3 = pyo.Var(bounds=(0,np.inf))
model.x4 = pyo.Var(bounds=(0,np.inf))

x1 = model.x1
x2 = model.x2
x3 = model.x3
x4 = model.x4

#objective fn
model.obj = pyo.Objective(expr = 4*x1+6*x2+7*x3+8*x4, sense = maximize)

#total number of the products constraint
model.C1 = pyo.Constraint(expr = x1+x2+x3+x4 == 950)

#labor constraint
model.labor = pyo.Constraint(expr = 3*x1+4*x2+5*x3+6*x4 <= 5000)

#raw material constraint
model.Rm = pyo.Constraint(expr = 2*x1+3*x2+4*x3+7*x4 <= 4600)

#production requirement
model.Pr = pyo.Constraint(expr = x4 >= 400)

#selet a solver
opt = SolverFactory('gurobi')

#solve
opt.solve(model)

#print the model
model.pprint()

#print the solution
print('Sales revenue, obj= ', pyo.value(model.obj))
print('x1 = ', pyo.value(x1))
print('x2 = ', pyo.value(x2))
print('x3 = ', pyo.value(x3))
print('x4 = ', pyo.value(x4))


############################################################################
import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()

#variables:
model.a1 = pyo.Var(bounds=(0,np.inf))
model.a2 = pyo.Var(bounds=(0,np.inf))
model.a3 = pyo.Var(bounds=(0,np.inf))


a1 = model.a1
a2 = model.a2
a3 = model.a3


#objective fn
model.obj = pyo.Objective(expr = 5*30*a1+4*50*a2-10*a3, sense = maximize)

#wheat limit
model.wheatLimit = pyo.Constraint(expr = 5*a1 <= 140)

#corn limit
model.cornLimit = pyo.Constraint(expr = 4*a2 <= 120)

#area limit
model.areaLimit = pyo.Constraint(expr = a1+a2 <= 45)

#labor limit
model.laborLimit = pyo.Constraint(expr = 6*a1+10*a2 <= a3)

#labor limit 2
model.laborLimit2 = pyo.Constraint(expr = a3 <= 350)

#selet a solver
opt = SolverFactory('gurobi')

#dual variables
model.dual = pyo.Suffix(direction= pyo.Suffix.IMPORT)

#solve
opt.solve(model)

#print the model
model.pprint()

#print the solution
print('Profit, obj= ', pyo.value(model.obj))
print('a1 = ', pyo.value(a1))
print('a2 = ', pyo.value(a2))
print('a3 = ', pyo.value(a3))

#print dual prices
model.dual.pprint()



#################################################################

import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()

#variables:
model.x1 = pyo.Var(bounds=(0,np.inf))
model.x2 = pyo.Var(bounds=(0,np.inf))


#variables with lower bound:
#model.x1 = pyo.Var(bounds=(30,np.inf))
#model.x2 = pyo.Var(bounds=(20,np.inf))


x1 = model.x1
x2 = model.x2


#objective fn
model.obj = pyo.Objective(expr = 300*x1+200*x2, sense = maximize)


#painting constr
model.paintConstr = pyo.Constraint(expr =  1/40*x1+1/60*x2 <= 1)

#process constr
model.processConstr = pyo.Constraint(expr = 1/50*x1+1/50*x2 <= 1)

#selet a solver
opt = SolverFactory('gurobi')


#dual variables
model.dual = pyo.Suffix(direction= pyo.Suffix.IMPORT)

#solve
opt.solve(model)

#print the model
model.pprint()

#print the solution
print('Profit, obj= ', pyo.value(model.obj))
print('x1 = ', pyo.value(x1))
print('x2 = ', pyo.value(x2))

#print dual prices
#model.dual.pprint()


#print only one dual price
dualforPaint = model.dual[model.paintConstr]
print('Dual price for paintshop comstr= ' , dualforPaint)