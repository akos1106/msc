model:

max = 4*x1+6*x2+7*x3+8*x4;

[rawmat] 2*x1+3*x2+4*x3+7*x4 <= 4600;
[labor] 3*x1+4*x2+5*x3+6*x4 <= 5000;
[demand] x1+x2+x3+x4 = 950;
[demandP4] x4 >= 400;

END

######################################################

model:

max = 150*x1+200*x2-10*x3;

[land] x1+x2 <= 45;
[labor] 6*x1+10*x2-x3 <= 0;
[budget] x3 <= 350;
[wheatDemand] 5*x1 <= 140;
[cornDwemand] 4*x2 <= 120;

end

######################################################
model:

max = 300*x1+400*x2-50*x3;

[steel] 2*x1+3*x2 <= 260;
[demandCar] x1 >= 88;
[demandTruck] x2 >= 26;
[M1] 0.8*x1+x2 -x3<= 0;
[M1allowed] x3 <= 98;
[M2] 0.6*x1+0.7*x2 <= 73;

@gin(x1);
@gin(x2);


END

######################################################

MODEL:
 sets:
  PLANT /P1 .. P3/: cpc; !capacity;
  TOWN /T1 .. T4/: dem; !demand;

  ROUTE (PLANT, TOWN): cost, x;
 endsets


!Objective fn;
[totalcost] min = @sum(route: cost*x);

!Capacity constraints;
@for(PLANT (i):
[capacity] @sum(town (j): x(i,j)) <= cpc(i)
);

!Demand constraints;
@for(TOWN (j):
[demand] @sum(plant (i): x(i,j)) >= dem(j)
);


!input;
 data:
 cpc = 	35 50 40;
 dem = 	45 20 30 30;
 cost = 	8 6 10 9 
		9 12 13 7 
		14 9 16 5;
enddata

END

######################################################

MODEL:
 sets:
  PLANT : cpc; !capacity;
  TOWN : dem; !demand;

  ROUTE (PLANT, TOWN): cost, x;
 endsets


!Objective fn;
[totalcost] min = @sum(route: cost*x);

!Capacity constraints;
@for(PLANT (i):
[capacity] @sum(town (j): x(i,j)) <= cpc(i)
);

!Demand constraints;
@for(TOWN (j):
[demand] @sum(plant (i): x(i,j)) >= dem(j)
);


!input;
 data:
 cpc, dem, cost, plant, town = 
	@OLE('transport.xlsx', 'cpc', 'dem', 'cost', 'plants', 'towns');


!output;
@OLE('transport.xlsx', 'solution') = x;

enddata

END


######################################################


MODEL:
 sets:
  PLANT : cpc; !capacity;
  TOWN : dem; !demand;

  ROUTE (PLANT, TOWN): prof, x;
 endsets


!Objective fn;
[totalcost] max = @sum(route: prof*x);

!Capacity constraints;
@for(PLANT (i):
[capacity] @sum(town (j): x(i,j)) <= cpc(i)
);

!Demand constraints;
@for(TOWN (j):
[demand] @sum(plant (i): x(i,j)) <= dem(j)
);


!input;
 data:
 cpc, dem, prof, plant, town = 
	@OLE('transport.xlsx', 'cpc', 'dem', 'prof', 'plants', 'towns');


!output;
@OLE('transport.xlsx', 'solution') = x;

enddata

END

#####################################################################
import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()

#variables:
model.x1 = pyo.Var(bounds=(0,np.inf))
model.x2 = pyo.Var(bounds=(0,np.inf))
model.x3 = pyo.Var(bounds=(0,np.inf))
model.x4 = pyo.Var(bounds=(0,np.inf))

x1 = model.x1
x2 = model.x2
x3 = model.x3
x4 = model.x4

#objective fn
model.obj = pyo.Objective(expr = 4*x1+6*x2+7*x3+8*x4, sense = maximize)

#total number of the products constraint
model.C1 = pyo.Constraint(expr = x1+x2+x3+x4 == 950)

#labor constraint
model.labor = pyo.Constraint(expr = 3*x1+4*x2+5*x3+6*x4 <= 5000)

#raw material constraint
model.Rm = pyo.Constraint(expr = 2*x1+3*x2+4*x3+7*x4 <= 4600)

#production requirement
model.Pr = pyo.Constraint(expr = x4 >= 400)

#selet a solver
opt = SolverFactory('gurobi')

#solve
opt.solve(model)

#print the model
model.pprint()

#print the solution
print('Sales revenue, obj= ', pyo.value(model.obj))
print('x1 = ', pyo.value(x1))
print('x2 = ', pyo.value(x2))
print('x3 = ', pyo.value(x3))
print('x4 = ', pyo.value(x4))


############################################################################
import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()

#variables:
model.a1 = pyo.Var(bounds=(0,np.inf))
model.a2 = pyo.Var(bounds=(0,np.inf))
model.a3 = pyo.Var(bounds=(0,np.inf))


a1 = model.a1
a2 = model.a2
a3 = model.a3


#objective fn
model.obj = pyo.Objective(expr = 5*30*a1+4*50*a2-10*a3, sense = maximize)

#wheat limit
model.wheatLimit = pyo.Constraint(expr = 5*a1 <= 140)

#corn limit
model.cornLimit = pyo.Constraint(expr = 4*a2 <= 120)

#area limit
model.areaLimit = pyo.Constraint(expr = a1+a2 <= 45)

#labor limit
model.laborLimit = pyo.Constraint(expr = 6*a1+10*a2 <= a3)

#labor limit 2
model.laborLimit2 = pyo.Constraint(expr = a3 <= 350)

#selet a solver
opt = SolverFactory('gurobi')

#dual variables
model.dual = pyo.Suffix(direction= pyo.Suffix.IMPORT)

#solve
opt.solve(model)

#print the model
model.pprint()

#print the solution
print('Profit, obj= ', pyo.value(model.obj))
print('a1 = ', pyo.value(a1))
print('a2 = ', pyo.value(a2))
print('a3 = ', pyo.value(a3))

#print dual prices
model.dual.pprint()



#################################################################

import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()

#variables:
model.x1 = pyo.Var(bounds=(0,np.inf))
model.x2 = pyo.Var(bounds=(0,np.inf))


#variables with lower bound:
#model.x1 = pyo.Var(bounds=(30,np.inf))
#model.x2 = pyo.Var(bounds=(20,np.inf))


x1 = model.x1
x2 = model.x2


#objective fn
model.obj = pyo.Objective(expr = 300*x1+200*x2, sense = maximize)


#painting constr
model.paintConstr = pyo.Constraint(expr =  1/40*x1+1/60*x2 <= 1)

#process constr
model.processConstr = pyo.Constraint(expr = 1/50*x1+1/50*x2 <= 1)

#selet a solver
opt = SolverFactory('gurobi')


#dual variables
model.dual = pyo.Suffix(direction= pyo.Suffix.IMPORT)

#solve
opt.solve(model)

#print the model
model.pprint()

#print the solution
print('Profit, obj= ', pyo.value(model.obj))
print('x1 = ', pyo.value(x1))
print('x2 = ', pyo.value(x2))

#print dual prices
#model.dual.pprint()


#print only one dual price
dualforPaint = model.dual[model.paintConstr]
print('Dual price for paintshop comstr= ' , dualforPaint)

############################################################################################# oct 28

import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()

#constants: p = number of plants, c = number of cities
p=3
c=4

#demand and supply input
dem = [45,20,30,30]
supply = [35,50,40]
cost = [[8,6,10,9],[9,12,13,7],[14,9,16,5]]

#variable
model.x = pyo.Var(range(1,p+1), range(1,c+1), bounds=(0,np.inf))
x = model.x

#objective
model.obj = pyo.Objective(expr = sum(cost[i-1][j-1] * x[i,j] 
                                     for i in range(1,p+1)
                                     for j in range(1,c+1)), sense=minimize)

#supply constraints
model.c1 = pyo.ConstraintList()
for i in range(1,p+1):
    model.c1.add(expr = sum(x[i,j]
                            for j in range(1,c+1)) <= supply[i-1])
    
#demands constraints
model.c2 = pyo.ConstraintList()
for j in range(1,c+1):
    model.c2.add(expr = sum(x[i,j]
                            for i in range(1,p+1)) >= dem[j-1])
    

#solve the model
opt = SolverFactory('gurobi')
results = opt.solve(model)
    
print('Total shipping cost= ',pyo.value(model.obj))

for i in range(1,p+1):
    for j in range(1,c+1):
       print('From P',i, 'to C',j,' : ',pyo.value(x[i,j]), '\n') 


#############################################################################################

import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()

#constants
bar=2
ingr=3

#supply input
stock = [100,20,30]
#price = [20,25]


#variable
model.x = pyo.Var(range(1,bar+1), range(1,ingr+1), bounds=(0,np.inf))
x = model.x

#objective
model.obj = pyo.Objective(expr = 20*(x[1,1]+x[1,2]+x[1,3])+25*(x[2,1]+x[2,2]+x[2,3]), sense=maximize)

#stock constraints
model.c1 = pyo.ConstraintList()
for j in range(1,ingr+1):
    model.c1.add(expr = sum(x[i,j]
                            for i in range(1,bar+1)) <= stock[j-1])
    
#content constraints
model.c2 = pyo.Constraint(expr = x[2,2] >= 0.2*(x[2,1]+x[2,2]+x[2,3]))

model.c3 = pyo.Constraint(expr = x[1,2] >= 0.1*(x[1,1]+x[1,2]+x[1,3]))

model.c4 = pyo.Constraint(expr = x[1,3] >= 0.1*(x[1,1]+x[1,2]+x[1,3]))
 
#solve the model
opt = SolverFactory('gurobi')
results = opt.solve(model)
    
print('Total income = ',pyo.value(model.obj))

for i in range(1,bar+1):
    for j in range(1,ingr+1):
       print('Into bar',i, 'form ingredient',j,' : ',pyo.value(x[i,j]), '\n') 


############################################################################################## nov 4

import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()


#supply input
Stock = {'Type':   ['Silicon', 'Nitrogen'],
         'Amount': [100, 80]
         }

Prod = 2
Ingr = 2

#variables
model.x = pyo.Var(range(1,Prod+1), range(1,Ingr+1), bounds=(0,np.inf))
x = model.x

model.S = pyo.Var(bounds=(0,100))
S = model.S

model.N = pyo.Var(bounds=(0,80))
N = model.N

#objective
model.obj = pyo.Objective(expr =  70*sum(x[1,j] for j in range(1,Ingr+1)) + 
                                  40*sum(x[2,j] for j in range(1,Ingr+1)) -
                                  10*S - 15*N, sense=pyo.maximize)

#stock constraints
model.c1 = pyo.Constraint(expr = sum(x[i,1] for i in range(1,Prod+1)) <= S)
#model.c2 = pyo.Constraint(expr = S <= 100)      don't need because of line 29's upper bound
model.c3 = pyo.Constraint(expr = sum(x[i,2] for i in range(1,Prod+1)) <= N)


    
#content constraints
model.c4 = pyo.Constraint(expr = x[1,2] >= 0.4*(x[1,1]+x[1,2])) #at least 40% N in F1

model.c5 = pyo.Constraint(expr = x[2,1] >= 0.7*(x[2,1]+x[2,2])) #at least 70% S in F2

 
#solve the model
opt = SolverFactory('gurobi')
results = opt.solve(model)
    
print('Total profit = ',pyo.value(model.obj))

for i in range(1,Prod+1):
    for j in range(1,Ingr+1):
       print('Into fertelizer',i, 'form ingredient',j,' : ',pyo.value(x[i,j]), '\n') 

##############################################################################################

import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory


model = pyo.ConcreteModel()


#supply input
days = {'Days':   ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
         'Required': [17,13,15,19,14,16,11]
         }


#variables
model.x = pyo.Var(range(1,8), within=Integers, bounds=(0,np.inf))
x = model.x



#objective
model.obj = pyo.Objective(expr =  sum(x[i] for i in range(1,8)), sense=minimize)

#stock constraints        #OR: if i != 2 and i != 3
#model.day1 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 2 and not i == 3) >= days['Required'][0]) 
#model.day2 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 3 and not i == 4) >= days['Required'][1])
#model.day3 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 4 and not i == 5) >= days['Required'][2])
#model.day4 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 5 and not i == 6) >= days['Required'][3])
#model.day5 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 6 and not i == 7) >= days['Required'][4])
#model.day6 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 7 and not i == 1) >= days['Required'][5])
#model.day7 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 1 and not i == 2) >= days['Required'][6])


model.D  = pyo.ConstraintList()
for j in range(1,8):
    model.D.add(sum(x[i] for i in range(1,8) if i != j % 7 + 1 and i != j % 7 + 2 and i != (j % 7 + 2) % 7)
                >= days['Required'][j-1])
 
#solve the model
opt = SolverFactory('gurobi')
results = opt.solve(model)
    
print('Total required employees = ',pyo.value(model.obj))
 
for i in range(1,8):
       print(pyo.value(x[i]), 'employee starts on',days['Days'][i-1]) 



############################################################################################################### nov 11

import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory
import pandas as pd #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


model = pyo.ConcreteModel()


##supply input
#days = {'Days':   ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
#         'Required': [17,13,15,19,14,16,11]
#         }

#supply input from excel
dataEmps = pd.read_excel('WS-input.xlsx')


#variables
model.x = pyo.Var(range(1,8), within=Integers, bounds=(0,np.inf))
x = model.x



#objective
model.obj = pyo.Objective(expr =  sum(x[i] for i in range(1,8)), sense=minimize)

#stock constraints        #OR: if i != 2 and i != 3
#model.day1 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 2 and not i == 3) >= days['Required'][0]) 
#model.day2 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 3 and not i == 4) >= days['Required'][1])
#model.day3 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 4 and not i == 5) >= days['Required'][2])
#model.day4 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 5 and not i == 6) >= days['Required'][3])
#model.day5 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 6 and not i == 7) >= days['Required'][4])
#model.day6 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 7 and not i == 1) >= days['Required'][5])
#model.day7 = pyo.Constraint(expr = sum(x[i] for i in range(1,8) if not i == 1 and not i == 2) >= days['Required'][6])


model.D  = pyo.ConstraintList()
for j in range(1,8):
    model.D.add(sum(x[i] for i in range(1,8) if i != j % 7 + 1 and i != j % 7 + 2 and i != (j % 7 + 2) % 7)
                >= dataEmps['Emp'][j-1])
 
#solve the model
opt = SolverFactory('gurobi')
results = opt.solve(model)
    
print('Total required employees = ',pyo.value(model.obj))
 
for i in range(1,8):
       print(pyo.value(x[i]), 'employee starts on',dataEmps['Days'][i-1]) 


###############################################################################################################
import pyomo.environ as pyo
import numpy as np
from pyomo.environ import *
from pyomo.opt import SolverFactory
import pandas as pd #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


model = pyo.ConcreteModel()


#supply input from excel
dataEmps = pd.read_excel('police-input.xlsx')


#variables
model.x = pyo.Var(range(1,7), within=Integers, bounds=(0,np.inf))
x = model.x


#objective
model.obj = pyo.Objective(expr =  sum(x[i] for i in range(1,7)), sense=minimize)


#model.D  = pyo.ConstraintList()
#for j in range(1,7):
#    model.D.add(sum(x[i] for i in range(1,7) if i == j or i == (j % 6 + 1) % 6)>= dataEmps['Emp'][j-1])
    
    
model.s1 = pyo.Constraint(expr = x[1] + x[6] >= dataEmps['Emp'][0]) 
model.s2 = pyo.Constraint(expr = x[2] + x[1] >= dataEmps['Emp'][1]) 
model.s3 = pyo.Constraint(expr = x[3] + x[2] >= dataEmps['Emp'][2]) 
model.s4 = pyo.Constraint(expr = x[4] + x[3] >= dataEmps['Emp'][3]) 
model.s5 = pyo.Constraint(expr = x[5] + x[4] >= dataEmps['Emp'][4]) 
model.s6 = pyo.Constraint(expr = x[6] + x[5] >= dataEmps['Emp'][5]) 
 
#solve the model
opt = SolverFactory('gurobi')
results = opt.solve(model)
    
print('Total required employees = ',pyo.value(model.obj))
 
for i in range(1,7):
       print(pyo.value(x[i]), 'starts working at',dataEmps['Hours'][i-1]) 


#####################################################################
model:

data:
M = 1000000000;
enddata

max = 2000*x1+3000*x2+4000*x3;

[steel] 1.5*x1+3*x2+5*x3 <= 6000;
[labor] 30*x1+25*x2+40*x3 <= 60000;

x1 <= M*y1;
1000-x1 <= M*(1-y1);

x2 <= M*y2;
1000-x2 <= M*(1-y2);

x3 <= M*y3;
1000-x3 <= M*(1-y3);

@bin(y1);
@bin(y2);
@bin(y3);

end

#########################################################################
model:

sets:
ps /P1..P7/:bh,sh,rb,def,x;
endsets

data:
M = 1000000000;
bh = 3 2 2 1 3 3 3;
sh = 3 1 3 3 3 1 2;
rb = 1 3 2 3 3 2 2;
def = 3 2 2 1 3 3 1;
enddata


max = @sum(ps: def*x);

[fiveplayers] @sum(ps (i): x(i)) = 5;

[fourguards] x(1)+x(3)+x(5)+x(7) >= 4;
[twoforward] x(3)+x(4)+x(5)+x(6)+x(7) >= 2;
[onecenter] x(2)+x(4)+x(6) >= 1;

[bhconst] (1/5)*@sum(ps (i): x(i)*bh(i)) >= 2;
[shconst] (1/5)*@sum(ps (i): x(i)*sh(i)) >= 2;
[rbconst] (1/5)*@sum(ps (i): x(i)*rb(i)) >= 2;


@for(ps (i):	
@bin(x(i))
);

end
